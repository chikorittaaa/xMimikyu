import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional
from config import EMBED_COLOR

class HelpDropdown(discord.ui.Select):
    """Dropdown menu for help categories"""
    def __init__(self):
        options = [
            discord.SelectOption(
                label="üè† Home",
                description="Return to main help menu",
                emoji="üè†",
                value="home"
            ),
            discord.SelectOption(
                label="üîÑ Release Commands",
                description="Commands for managing release IDs",
                emoji="üîÑ",
                value="release"
            ),
            discord.SelectOption(
                label="‚ö° Evolve Commands",
                description="Commands for managing evolve IDs",
                emoji="‚ö°",
                value="evolve"
            ),
            discord.SelectOption(
                label="üìù ID Recording",
                description="Commands for recording Pokemon IDs",
                emoji="üìù",
                value="recording"
            ),
            discord.SelectOption(
                label="üîç Quest Helper",
                description="Commands for event quest suggestions",
                emoji="üîç",
                value="quest"
            )
        ]
        super().__init__(
            placeholder="Choose a category...",
            options=options,
            custom_id="help_dropdown"
        )

    async def callback(self, interaction: discord.Interaction):
        embed = self.get_embed_for_category(self.values[0])
        await interaction.response.edit_message(embed=embed, view=self.view)

    def get_embed_for_category(self, category: str) -> discord.Embed:
        """Get embed for selected category"""
        if category == "home":
            return self.get_home_embed()
        elif category == "release":
            return self.get_release_embed()
        elif category == "evolve":
            return self.get_evolve_embed()
        elif category == "recording":
            return self.get_recording_embed()
        elif category == "quest":
            return self.get_quest_embed()
        return self.get_home_embed()

    def get_home_embed(self) -> discord.Embed:
        """Main help menu embed"""
        embed = discord.Embed(
            title="üìö Help Menu",
            description=(
                "Welcome to the Pokemon Bot Helper! This bot helps you manage and automate Pokemon commands.\n\n"
                "**Available Categories:**\n\n"
                "üîÑ **Release Commands** - Manage your Pokemon release list\n"
                "‚ö° **Evolve Commands** - Manage your Pokemon evolve list\n"
                "üìù **ID Recording** - Record Pokemon IDs from messages\n"
                "üîç **Quest Helper** - Get Pokemon suggestions for event quests\n\n"
                "Select a category from the dropdown below to see detailed commands!"
            ),
            color=EMBED_COLOR
        )
        embed.set_footer(text="Select a category to get started ‚Ä¢ Commands are case-insensitive")
        return embed

    def get_release_embed(self) -> discord.Embed:
        """Release commands help embed"""
        embed = discord.Embed(
            title="üîÑ Release Commands",
            description="Manage your Pokemon release list with these commands:",
            color=EMBED_COLOR
        )

        embed.add_field(
            name="üìã Panel Command",
            value=(
                "**`!releasepanel`** or **`!rp`**\n"
                "Opens an interactive panel with buttons to manage your release list. "
                "The easiest way to add, remove, view, and clear IDs!\n"
                "‚è±Ô∏è Panel expires after 5 minutes."
            ),
            inline=False
        )

        embed.add_field(
            name="‚ûï Add IDs",
            value=(
                "**`!releaseadd <ids...>`** or **`!ra <ids...>`**\n"
                "Add Pokemon IDs to your release list.\n"
                "**Example:** `!ra 123 456 789`\n"
                "‚Ä¢ Automatically ignores duplicate IDs\n"
                "‚Ä¢ Add multiple IDs separated by spaces"
            ),
            inline=False
        )

        embed.add_field(
            name="‚ûñ Remove IDs",
            value=(
                "**`!releaseremove <ids...>`** or **`!rr <ids...>`**\n"
                "Remove specific Pokemon IDs from your list.\n"
                "**Example:** `!rr 123 456`\n"
                "‚Ä¢ Remove multiple IDs at once"
            ),
            inline=False
        )

        embed.add_field(
            name="üìã View List",
            value=(
                "**`!releaselist`** or **`!rl`**\n"
                "View all Pokemon IDs in your release list.\n"
                "‚Ä¢ Shows 150 IDs per page\n"
                "‚Ä¢ Use ‚óÄ ‚ñ∂ buttons to navigate pages"
            ),
            inline=False
        )

        embed.add_field(
            name="üîÑ Release IDs",
            value=(
                "**`!release <count>`** or **`!r <count>`**\n"
                "Release Pokemon IDs from your list.\n"
                "**Example:** `!r 7` releases first 7 IDs\n"
                "‚Ä¢ Also works as slash command: `/release 7`\n"
                "‚Ä¢ Removes used IDs from your list\n"
                "‚Ä¢ IDs are taken from the beginning of the list"
            ),
            inline=False
        )

        embed.add_field(
            name="üóëÔ∏è Clear All",
            value=(
                "**`!releaseclear`** or **`!rc`**\n"
                "Remove all IDs from your release list.\n"
                "‚ö†Ô∏è This action clears your entire list!"
            ),
            inline=False
        )

        embed.set_footer(text="üí° Tip: Use the panel (!rp) for the easiest experience!")
        return embed

    def get_evolve_embed(self) -> discord.Embed:
        """Evolve commands help embed"""
        embed = discord.Embed(
            title="‚ö° Evolve Commands",
            description="Manage your Pokemon evolve list with advanced use tracking:",
            color=EMBED_COLOR
        )

        embed.add_field(
            name="üìã Panel Command",
            value=(
                "**`!evolvepanel`** or **`!ep`**\n"
                "Opens an interactive panel with buttons to manage your evolve list. "
                "The easiest way to add, remove, view, and clear IDs!\n"
                "‚è±Ô∏è Panel expires after 5 minutes."
            ),
            inline=False
        )

        embed.add_field(
            name="‚ûï Add IDs",
            value=(
                "**`!evolveadd <ids...>`** or **`!ea <ids...>`**\n"
                "Add Pokemon IDs to your evolve list.\n"
                "**Examples:**\n"
                "‚Ä¢ `!ea 123 456` - Adds with 2 uses (default)\n"
                "‚Ä¢ `!ea 789 --once` - Adds with 1 use only\n"
                "‚Ä¢ Automatically ignores duplicate IDs\n"
                "‚Ä¢ Add multiple IDs separated by spaces"
            ),
            inline=False
        )

        embed.add_field(
            name="‚ûñ Remove IDs",
            value=(
                "**`!evolveremove <ids...>`** or **`!er <ids...>`**\n"
                "Remove Pokemon IDs from your list.\n"
                "**Examples:**\n"
                "‚Ä¢ `!er 123 456` - Removes completely\n"
                "‚Ä¢ `!er 789 --once` - Removes 1 use only\n"
                "‚Ä¢ Remove multiple IDs at once"
            ),
            inline=False
        )

        embed.add_field(
            name="üìã View List",
            value=(
                "**`!evolvelist`** or **`!el`**\n"
                "View all Pokemon IDs in your evolve list.\n"
                "‚Ä¢ Organized into **1x Use** and **2x Uses** tabs\n"
                "‚Ä¢ Shows 50 IDs per page\n"
                "‚Ä¢ Use buttons to switch tabs and navigate pages"
            ),
            inline=False
        )

        embed.add_field(
            name="‚ö° Evolve IDs",
            value=(
                "**`!evolve <count>`** or **`!e <count>`**\n"
                "Evolve Pokemon IDs from your list.\n"
                "**Example:** `!e 7` evolves first 7 IDs\n"
                "‚Ä¢ Also works as slash command: `/evolve 7`\n"
                "‚Ä¢ Prioritizes 2x use IDs first\n"
                "‚Ä¢ Decrements use count instead of removing\n"
                "‚Ä¢ IDs with 2 uses become 1 use after first evolve"
            ),
            inline=False
        )

        embed.add_field(
            name="üóëÔ∏è Clear All",
            value=(
                "**`!evolveclear`** or **`!ec`**\n"
                "Remove all IDs from your evolve list.\n"
                "‚ö†Ô∏è This action clears your entire list!"
            ),
            inline=False
        )

        embed.add_field(
            name="üîç How Uses Work",
            value=(
                "Each ID can have **1 or 2 uses**:\n"
                "‚Ä¢ **2 uses:** ID evolves twice before being removed\n"
                "‚Ä¢ **1 use:** ID evolves once then gets removed\n"
                "‚Ä¢ Using `!evolve` prioritizes 2x IDs first\n"
                "‚Ä¢ After one use, 2x IDs become 1x IDs"
            ),
            inline=False
        )

        embed.set_footer(text="üí° Tip: Use the panel (!ep) for the easiest experience!")
        return embed

    def get_recording_embed(self) -> discord.Embed:
        """ID recording help embed"""
        embed = discord.Embed(
            title="üìù ID Recording",
            description="Record Pokemon IDs automatically from bot messages:",
            color=EMBED_COLOR
        )

        embed.add_field(
            name="üéØ How to Use",
            value=(
                "**`!id`** (Reply to a message)\n\n"
                "**Steps:**\n"
                "1Ô∏è‚É£ Find a message with Pokemon embeds (from bot)\n"
                "2Ô∏è‚É£ Reply to that message with `!id`\n"
                "3Ô∏è‚É£ Bot starts recording IDs automatically\n"
                "4Ô∏è‚É£ Click **Stop Recording** button when done"
            ),
            inline=False
        )

        embed.add_field(
            name="‚ú® Features",
            value=(
                "‚Ä¢ **Real-time tracking** - IDs update instantly as message edits\n"
                "‚Ä¢ **Auto-detection** - Finds Pokemon IDs in embed descriptions\n"
                "‚Ä¢ **Duplicate removal** - Only unique IDs are saved\n"
                "‚Ä¢ **Auto-timeout** - Stops after 10 minutes of inactivity\n"
                "‚Ä¢ **Manual stop** - Use the button anytime to stop\n"
                "‚Ä¢ **Multiple recordings** - Track different messages simultaneously"
            ),
            inline=False
        )

        embed.add_field(
            name="üìä Results",
            value=(
                "When recording stops, you'll receive:\n"
                "‚Ä¢ **Total count** of unique IDs found\n"
                "‚Ä¢ **Sorted list** (newest to oldest)\n"
                "‚Ä¢ **Paginated view** if more than 50 IDs\n"
                "‚Ä¢ **Copy-ready format** in code blocks\n"
                "‚Ä¢ **Space-separated** for easy copying"
            ),
            inline=False
        )

        embed.add_field(
            name="‚öôÔ∏è Settings",
            value=(
                "**Timeout:** 10 minutes of no new IDs\n"
                "**IDs per page:** 50\n"
                "**Check interval:** 30 seconds\n"
                "**ID Format:** Must be in backticks (`` `123456` ``)\n\n"
                "‚è±Ô∏è Timer resets when new IDs are detected!"
            ),
            inline=False
        )

        embed.add_field(
            name="üí° Pro Tips",
            value=(
                "‚Ä¢ Works with any message containing Pokemon IDs\n"
                "‚Ä¢ Perfect for mass spawn events\n"
                "‚Ä¢ Can track multiple messages simultaneously\n"
                "‚Ä¢ Anyone can stop the recording with the button\n"
                "‚Ä¢ Results are automatically sorted by ID number\n"
                "‚Ä¢ Detects both **`bold`** and `regular` ID formats"
            ),
            inline=False
        )

        embed.add_field(
            name="‚ö†Ô∏è Requirements",
            value=(
                "‚Ä¢ Must reply to a message (use Discord's reply feature)\n"
                "‚Ä¢ Message must contain embeds with Pokemon IDs\n"
                "‚Ä¢ Bot needs permission to read message history\n"
                "‚Ä¢ IDs must be in backticks: `` `123456` ``\n"
                "‚Ä¢ Original message must not be deleted during recording"
            ),
            inline=False
        )

        embed.set_footer(text="üí° Tip: Reply to any Pokemon bot message and use !id")
        return embed

    def get_quest_embed(self) -> discord.Embed:
        """Quest helper commands help embed"""
        embed = discord.Embed(
            title="üîç Quest Helper Commands",
            description="Get smart Pokemon suggestions for event quests:",
            color=EMBED_COLOR
        )

        embed.add_field(
            name="üéØ Main Command",
            value=(
                "**`!suggest [count]`** or **`!s [count]`**\n"
                "Analyzes the latest event quest embed and suggests Pokemon.\n"
                "**Examples:**\n"
                "‚Ä¢ `!suggest` - Suggests 2 Pokemon per quest (default)\n"
                "‚Ä¢ `!s 3` - Suggests 3 Pokemon per quest\n"
                "‚Ä¢ Also works as slash command: `/suggest 3`"
            ),
            inline=False
        )

        embed.add_field(
            name="‚ú® How It Works",
            value=(
                "1Ô∏è‚É£ Finds the most recent event quest embed in the channel\n"
                "2Ô∏è‚É£ Analyzes each quest requirement (type, region, gender)\n"
                "3Ô∏è‚É£ Suggests Pokemon with **best spawn rates** first\n"
                "4Ô∏è‚É£ Shows a summary with all suggestions\n"
                "5Ô∏è‚É£ Click **Details** button for full quest breakdown"
            ),
            inline=False
        )

        embed.add_field(
            name="üìä Features",
            value=(
                "‚Ä¢ **Smart prioritization** - Suggests Pokemon with spawn rates 1/225 > 1/337 > 1/674\n"
                "‚Ä¢ **Type matching** - Finds Pokemon matching quest types (Fire, Water, etc.)\n"
                "‚Ä¢ **Region matching** - Filters by region (Kanto, Johto, etc.)\n"
                "‚Ä¢ **Gender quests** - Handles male, female, and genderless requirements\n"
                "‚Ä¢ **Dual-type support** - Considers both primary and secondary types\n"
                "‚Ä¢ **No duplicates** - Each Pokemon suggested once per event\n"
                "‚Ä¢ **Detailed info** - Shows Dex #, types, region, and spawn rate"
            ),
            inline=False
        )

        embed.add_field(
            name="üìã Output Format",
            value=(
                "**Summary View:**\n"
                "‚Ä¢ Complete list of all suggested Pokemon\n"
                "‚Ä¢ Separate section for gender quest suggestions\n\n"
                "**Details View** (click button):\n"
                "‚Ä¢ Individual quest breakdown\n"
                "‚Ä¢ Pokemon suggestions for each quest\n"
                "‚Ä¢ Full Pokemon information per suggestion"
            ),
            inline=False
        )

        embed.add_field(
            name="üéÆ Supported Quest Types",
            value=(
                "‚úÖ Type-based quests (Fire, Water, Grass, etc.)\n"
                "‚úÖ Region-based quests (Kanto, Johto, etc.)\n"
                "‚úÖ Gender-based quests (Male, Female, Genderless)\n"
                "‚úÖ Combined quests (Type + Region)\n"
                "‚ùå Breeding quests (skipped automatically)"
            ),
            inline=False
        )

        embed.add_field(
            name="‚öôÔ∏è Parameters",
            value=(
                "**Count:** 1-5 Pokemon per quest\n"
                "‚Ä¢ Default: 2 Pokemon\n"
                "‚Ä¢ Higher counts give more options\n"
                "‚Ä¢ Best spawn rates prioritized first\n\n"
                "**Search Range:** Last 50 messages\n"
                "‚Ä¢ Searches for event quest embeds\n"
                "‚Ä¢ Must have a field with 'quest' in the name"
            ),
            inline=False
        )

        embed.add_field(
            name="üí° Pro Tips",
            value=(
                "‚Ä¢ Run command in the same channel as event embeds\n"
                "‚Ä¢ Use higher counts (3-5) for more variety\n"
                "‚Ä¢ Gender quest suggestions appear separately\n"
                "‚Ä¢ Click Details button to see quest-by-quest breakdown\n"
                "‚Ä¢ Pokemon are sorted by spawn rate for efficiency\n"
                "‚Ä¢ Works with any event quest format"
            ),
            inline=False
        )

        embed.add_field(
            name="‚ö†Ô∏è Requirements",
            value=(
                "‚Ä¢ Event quest embed must be in recent messages (last 50)\n"
                "‚Ä¢ Embed must have a field containing 'quest' in its name\n"
                "‚Ä¢ Quests must follow standard format (numbered list)\n"
                "‚Ä¢ Bot needs permission to read message history"
            ),
            inline=False
        )

        embed.set_footer(text="üí° Tip: Use !suggest in channels with event quest embeds")
        return embed

class HelpView(discord.ui.View):
    """View for help command with dropdown and quick navigation buttons"""
    def __init__(self):
        super().__init__(timeout=300)
        self.add_item(HelpDropdown())

    def get_dropdown(self) -> HelpDropdown:
        """Get the dropdown from the view"""
        for item in self.children:
            if isinstance(item, HelpDropdown):
                return item
        return None

    @discord.ui.button(label="üè† Home", style=discord.ButtonStyle.secondary, row=1)
    async def home_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        dropdown = self.get_dropdown()
        if dropdown:
            embed = dropdown.get_home_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="üîÑ Release", style=discord.ButtonStyle.primary, row=1)
    async def release_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        dropdown = self.get_dropdown()
        if dropdown:
            embed = dropdown.get_release_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="‚ö° Evolve", style=discord.ButtonStyle.primary, row=1)
    async def evolve_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        dropdown = self.get_dropdown()
        if dropdown:
            embed = dropdown.get_evolve_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="üìù Recording", style=discord.ButtonStyle.primary, row=1)
    async def recording_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        dropdown = self.get_dropdown()
        if dropdown:
            embed = dropdown.get_recording_embed()
            await interaction.response.edit_message(embed=embed, view=self)

    @discord.ui.button(label="üîç Quest", style=discord.ButtonStyle.primary, row=2)
    async def quest_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        dropdown = self.get_dropdown()
        if dropdown:
            embed = dropdown.get_quest_embed()
            await interaction.response.edit_message(embed=embed, view=self)

class HelpCommands(commands.Cog):
    """Help commands for the bot"""

    def __init__(self, bot):
        self.bot = bot

    @commands.command(name='help', aliases=['h', 'commands', 'cmds'])
    async def help_command(self, ctx: commands.Context, category: Optional[str] = None):
        """
        Show help menu with command information.
        Usage: !help or !h
        Optional: !help <category> (release/evolve/recording/quest)
        """
        dropdown = HelpDropdown()

        if category:
            category_lower = category.lower()
            if category_lower in ['release', 'r', 'rel']:
                embed = dropdown.get_release_embed()
            elif category_lower in ['evolve', 'e', 'evo']:
                embed = dropdown.get_evolve_embed()
            elif category_lower in ['recording', 'id', 'rec', 'record']:
                embed = dropdown.get_recording_embed()
            elif category_lower in ['quest', 'q', 'suggest', 'suggestion']:
                embed = dropdown.get_quest_embed()
            else:
                embed = dropdown.get_home_embed()
        else:
            embed = dropdown.get_home_embed()

        view = HelpView()
        await ctx.reply(embed=embed, view=view, mention_author=False)

    @app_commands.command(name='help', description='Show help menu with command information')
    @app_commands.describe(category='Choose a specific category (release/evolve/recording/quest)')
    @app_commands.choices(category=[
        app_commands.Choice(name='Release Commands', value='release'),
        app_commands.Choice(name='Evolve Commands', value='evolve'),
        app_commands.Choice(name='ID Recording', value='recording'),
        app_commands.Choice(name='Quest Helper', value='quest'),
    ])
    async def help_slash(
        self, 
        interaction: discord.Interaction, 
        category: Optional[app_commands.Choice[str]] = None
    ):
        """
        Slash command version of help.
        Usage: /help
        """
        dropdown = HelpDropdown()

        if category:
            category_value = category.value if hasattr(category, 'value') else category
            if category_value == 'release':
                embed = dropdown.get_release_embed()
            elif category_value == 'evolve':
                embed = dropdown.get_evolve_embed()
            elif category_value == 'recording':
                embed = dropdown.get_recording_embed()
            elif category_value == 'quest':
                embed = dropdown.get_quest_embed()
            else:
                embed = dropdown.get_home_embed()
        else:
            embed = dropdown.get_home_embed()

        view = HelpView()
        await interaction.response.send_message(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(HelpCommands(bot))
